on:
  workflow_dispatch:
  push:

env:
  REGISTRY: ghcr.io
  NAMESPACE: eric-zadara

jobs:
  identify:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    outputs:
      containers: "${{ steps.vars.outputs.containers }}"

    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: identify containers to build
        id: vars
        run: |
          TODO=()
          echo "::group::Checking for versions files modified in '${GITHUB_SHA:-}'"
          for container in $(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | awk -F'/' '!/^\./{ if (NF > 1) { print $1 }}' | sort -u); do
            echo "Checking ${container} for Dockerfile and versions"
            DOCKERFILES=( $(find "${container}" -maxdepth 1 -iname 'Dockerfile*' -printf '%P\n') )
            for DFILE in ${DOCKERFILES[@]}; do
              if [[ -e "${container}/versions" && -e "${container}/${DFILE}" ]]; then
                echo "Adding ${container}/${DFILE}"
                TODO+=( "${container}/${DFILE}" )
              fi
            done
          done
          echo "::endgroup::"
          PAYLOAD=$(echo -n "${TODO[@]}" | tr ' ' '\n' | jq -c --raw-input -s 'split("\n")')
          echo "PAYLOAD - ${PAYLOAD}"
          echo "containers=${PAYLOAD}" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: identify
    if: ${{ needs.identify.outputs.containers != '[]' && needs.identify.outputs.containers != '' }}
    strategy:
      fail-fast: false
      matrix:
        container: ${{ fromJSON(needs.identify.outputs.containers) }}

    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: vars
        id: vars
        run: |
          CONTAINER=$(echo ${{ matrix.container }} | cut -d '/' -f1)
          DOCKERFILE=$(echo ${{ matrix.container }} | cut -d '/' -f2-)
          SUFFIX=$(echo ${DOCKERFILE#*.} | sed 's@Dockerfile@@g')
          VER=$(tail -n1 ${CONTAINER}/versions)
          REMOTE_VER=$(cd "${CONTAINER}" && bash "./version.sh")
          echo "CONTAINER=${CONTAINER}" >> $GITHUB_OUTPUT
          echo "DOCKERFILE=${DOCKERFILE}" >> $GITHUB_OUTPUT
          echo "SUFFIX=${SUFFIX}" >> $GITHUB_OUTPUT
          echo "CONTAINER_VERSION=${VER}" >> $GITHUB_OUTPUT
          echo "REMOTE_VERSION=${REMOTE_VER}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate metadata (tags, labels) for Docker
        id: meta
        if: steps.vars.outputs.SUFFIX == ''
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ env.NAMESPACE }}/${{ steps.vars.outputs.CONTAINER }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{major}}.{{minor}}.{{patch}},value=${{ steps.vars.outputs.CONTAINER_VERSION }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.vars.outputs.CONTAINER_VERSION }}
            type=semver,pattern={{major}},value=${{ steps.vars.outputs.CONTAINER_VERSION }}
            type=raw,value=${{ steps.vars.outputs.CONTAINER_VERSION }}
            type=raw,value=latest,enable=${{ steps.vars.outputs.CONTAINER_VERSION == steps.vars.outputs.REMOTE_VERSION }}
            type=raw,value={{date 'YYYY-MM-DD'}},enable=${{ steps.vars.outputs.CONTAINER_VERSION == steps.vars.outputs.REMOTE_VERSION }}

      - name: Generate metadata (tags, labels) for Docker
        id: meta-suffix
        if: steps.vars.outputs.SUFFIX != ''
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ env.NAMESPACE }}/${{ steps.vars.outputs.CONTAINER }}
          flavor: |
            latest=false
            suffix=${{ steps.vars.outputs.SUFFIX }}
          tags: |
            type=semver,pattern={{major}}.{{minor}}.{{patch}},value=${{ steps.vars.outputs.CONTAINER_VERSION }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.vars.outputs.CONTAINER_VERSION }}
            type=semver,pattern={{major}},value=${{ steps.vars.outputs.CONTAINER_VERSION }}
            type=raw,value=${{ steps.vars.outputs.CONTAINER_VERSION }}
            type=raw,value=latest,enable=${{ steps.vars.outputs.CONTAINER_VERSION == steps.vars.outputs.REMOTE_VERSION }}
            type=raw,value={{date 'YYYY-MM-DD'}},enable=${{ steps.vars.outputs.CONTAINER_VERSION == steps.vars.outputs.REMOTE_VERSION }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ steps.vars.outputs.CONTAINER }}
          file: ${{ steps.vars.outputs.DOCKERFILE }}
          push: true
          tags: ${{ steps.vars.outputs.SUFFIX == '' && steps.meta.outputs.tags || steps.meta-suffix.outputs.tags }}
          labels: ${{ steps.vars.outputs.SUFFIX == '' && steps.meta.outputs.labels || steps.meta-suffix.outputs.labels }}
          build-args:
            CONTAINER_VERSION=${{ steps.vars.outputs.CONTAINER_VERSION }}

